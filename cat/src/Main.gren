module Main exposing (main)

import Node
import Bytes exposing (Bytes)
import Stream
import Node exposing (Environment)
import FileSystem
import FileSystem.Path as Path
import Init
import Task


main : Node.SimpleProgram a
main =
    Node.defineSimpleProgram init


init : Environment -> Init.Task (Cmd a)
init env =
    Init.await FileSystem.initialize <| \fsPermission ->
        when env.args is
            [ _, _, file ] ->
                FileSystem.readFile fsPermission (Path.fromPosixString file)
                    |> Task.map (Bytes.toString >> Maybe.withDefault "")
                    |> Task.onError (Task.succeed << FileSystem.errorToString)
                    |> Task.andThen (\str -> Stream.writeLineAsBytes str env.stdout)
                    |> Task.onError (\_ -> Task.succeed env.stdout)
                    |> Node.endSimpleProgram

            _ ->
                "Exactly one argument is required: the file name to read"
                    |> (\str -> Stream.writeLineAsBytes str env.stderr)
                    |> Task.onError (\_ -> Task.succeed env.stderr)
                    |> Node.endSimpleProgram
