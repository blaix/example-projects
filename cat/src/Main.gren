module Main exposing (main)

import Node
import Bytes exposing (Bytes)
import Stream exposing (Stream)
import Node.Program as Program exposing (Program)
import FileSystem
import Task


main : Program Model Msg
main =
    Program.define
        { init = init
        , update = update
        , subscriptions = \_ -> Sub.none
        }


type alias Model =
    { stdout : Stream 
    , stderr : Stream
    }


type Msg
    = OpenResult (Result FileSystem.AccessError (FileSystem.ReadableFileHandle Never))
    | ReadResult (Result FileSystem.UnknownFileSystemError Bytes)


init : Program.AppInitTask { model : Model, command : Cmd Msg }
init =
    Program.await Node.initialize <| \nodeConfig ->
        Program.await FileSystem.initialize <| \fsPermission ->
            Program.startProgram
                { model =
                    { stdout = nodeConfig.stdout
                    , stderr = nodeConfig.stderr
                    }
                , command =
                    case nodeConfig.args of
                        [ _, _, file ] ->
                            FileSystem.openForRead fsPermission file
                                |> Task.attempt OpenResult

                        _ ->
                            Stream.sendLine nodeConfig.stderr <|
                                "Exactly one argument is required: the file name to read"
                }


update : Msg -> Model -> { model : Model, command : Cmd Msg }
update msg model =
    case msg of
        OpenResult (Ok fh) ->
            { model = model
            , command =
                FileSystem.read fh
                    |> Task.attempt ReadResult
            }

        OpenResult (Err error) ->
            { model = model
            , command =
                Stream.sendLine model.stderr <|
                    "Failed to open file"
            }

        ReadResult (Ok bytes) ->
            { model = model
            , command = 
                Stream.send model.stdout bytes
            }

        ReadResult (Err error) ->
            { model = model
            , command =
                Stream.sendLine model.stderr <|
                    "Failed to read file"
            }

